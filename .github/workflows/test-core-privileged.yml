name: Core Package Tests

# access to secrets
on:
  workflow_run:
    workflows: ['Core Package Tests (Unprivileged)']
    types:
      - completed

jobs:
  test:
    # Only run on the main repository, not on forks
    if: ${{ github.repository == 'mastra-ai/mastra' }} && ${{ github.event.workflow_run.actor.login == 'wardpeet' }}

    runs-on: ubuntu-latest
    steps:
      - name: Download workflow artifacts
        uses: actions/github-script@v7
        with:
          script: |
            // Get the PR number from the workflow run
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });

            // Look for PR info artifact (you'll need to create this in your main workflow)
            let prArtifact = allArtifacts.data.artifacts.find(artifact => 
              artifact.name === 'pr-info'
            );

            if (prArtifact) {
              let download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: prArtifact.id,
                archive_format: 'zip',
              });
              
              let fs = require('fs');
              fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/pr-info.zip`, Buffer.from(download.data));
            }

      - name: Extract PR info
        run: |
          if [ -f pr-info.zip ]; then
            unzip -q pr-info.zip
            echo "PR_NUMBER=$(cat pr_number.txt)" >> $GITHUB_ENV
            echo "HEAD_SHA=$(cat head_sha.txt)" >> $GITHUB_ENV
          else
            echo "No PR info found, exiting"
            exit 1
          fi

      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Log
        run: |
          echo "PR: ${{ github.event.workflow_run.event }}"
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "ID: ${{ github.event.workflow_run.id }}"
          echo "Head ref: ${{ github.event.workflow_run.head_branch }}"
          echo "commit ref: ${{ github.event.workflow_run.head_commit }}"

      - name: Setup Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.19.1
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Run Core tests
        run: pnpm test:core
        env:
          NODE_OPTIONS: '--max_old_space_size=8096'
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Find existing comment
        id: find-comment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: process.env.PR_NUMBER
            });

            // Find comment by this bot/user (adjust the condition based on your needs)
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('<!-- UPSERT_COMMENT_MARKER -->')
            );

            return botComment ? botComment.id : null;

      - name: Create or update comment
        uses: actions/github-script@v7
        with:
          script: |
            const commentId = ${{ steps.find-comment.outputs.result }};
            const commentBody = `<!-- UPSERT_COMMENT_MARKER -->
            ## ðŸ¤– Automated Comment

            **Workflow Status:** ${{ github.event.workflow_run.conclusion }}
            **Commit:** \`${{ env.HEAD_SHA }}\`
            **Run:** [#${{ github.event.workflow_run.run_number }}](${{ github.event.workflow_run.html_url }})

            <!-- Add your actual comment content here -->
            Your workflow has completed with status: **${{ github.event.workflow_run.conclusion }}**

            _Last updated: ${new Date().toISOString()}_`;

            if (commentId) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentId,
                body: commentBody
              });
              console.log(`Updated comment ${commentId}`);
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: process.env.PR_NUMBER,
                body: commentBody
              });
              console.log('Created new comment');
â‰ 